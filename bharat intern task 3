import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.datasets import mnist
import matplotlib.pyplot as plt

# Load the MNIST dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Preprocess the data
x_train = x_train.astype('float32') / 255.0
x_test = x_test.astype('float32') / 255.0

# Define the neural network model
model = keras.Sequential([
    layers.Flatten(input_shape=(28, 28)),
    layers.Dense(128, activation='relu'),
    layers.Dropout(0.2),
    layers.Dense(10, activation='softmax')
])

# Compile the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Train the model
model.fit(x_train, y_train, epochs=5, batch_size=64, validation_split=0.2)

# Evaluate the model on the test data
test_loss, test_acc = model.evaluate(x_test, y_test)
print(f'Test accuracy: {test_acc * 100:.2f}%')

# Make predictions on new data
def predict_digit(image):
    # Preprocess the image
    image = np.array(image).astype('float32') / 255.0
    image = np.expand_dims(image, axis=0)
    
    # Make the prediction
    prediction = model.predict(image)
    digit = np.argmax(prediction)
    confidence = prediction[0][digit] * 100
    
    return digit, confidence

# Example usage:
# Load an image of a handwritten digit (you can draw your own or use an image)
# digit_image = plt.imread('your_digit_image.png')
# predicted_digit, confidence = predict_digit(digit_image)
# print(f'Predicted Digit: {predicted_digit}, Confidence: {confidence:.2f}%')
